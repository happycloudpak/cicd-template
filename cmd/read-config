#!/bin/bash
#VERSION:1.0
echo ""
echo "************** RUN READ CONFIG ***************"
echo ""

echo "STEP1. Get parameters "
# get parameters
if ([ $# -lt 3 ]) || ([ $# -eq 1 ] && [ "$1" == "-h" -o "$1" == "--help" ]); then
  echo "read-config <profile> <root directory> <config kinds>"
  echo " profile: 배포대상 환경 프로파일(ex:dev, prod) "
  echo " root directory: project의 최상위 디렉토리. '.'은 현재 디렉토리 의미함. "
  echo " config kinds: 읽은 config 종류로 cicd,cm,secret중 지정하며, comma로 복수값 지정 가능함 "
  echo " ex) ./read-config prod ~/worki cicd,cm,secret"
  echo " ex) ./read-config prod . cicd"
  exit 1
fi

profile=$1
basedir=$2
config_kinds=$3
appname=`cat ${basedir}/pom.xml | grep \<name\> | cut -d ">" -f2 | cut -d "<" -f1`
if [ "${appname}" == "" ]; then
	echo "CAN'T get application name. check <name> in pom.xml"
	exit 1
fi

# set download url 환경변수 
${basedir}/cicd/cmd/set-url

function mkFile() {
	#echo "Donwload config file: ${fn} from ${url}"

  	wget -O ${fn} ${url}
  	if [ $? -eq 1 ]; then
    	echo "Fail to downloade: ${url}"
    	return 1
  	fi

  	len=`./jq '.propertySources | length' ${fn}`
  	for ((i=0;i<$len;i++));
  	do
    	nm=`./jq ".propertySources[$i].name" ${fn}`
    	if [[ "$nm" =~ ".properties" ]]; then
      		#echo "$i => $nm"

      		chk=`./jq ".propertySources[$i].source" ${fn} > $i-${fn}`
      		if [ $? -eq 0 ]; then
        		len2=`./jq "keys | length" $i-${fn}`

        		for ((j=0;j<$len2;j++))
        		do
          			key=`./jq -r "keys[$j]" $i-${fn}`
          			val=`./jq -r ".[\"$key\"]" $i-${fn}`
          			echo "$key=$val" >> ${ofn}
        		done
      		fi
    	fi
	done
}

# install jq
echo "STEP2. Check jq program and install it if not"
chk=`which ./jq`
if [ $? -eq 1 ]; then
  wget -O jq ${JQ_DOWNLOAD_URL}
  chmod +x ./jq
  echo "jq installed"
fi

# get config-server ingress host
echo "STEP4. Get config server ingress host "
host=`kubectl get ing ${INGRESS_CONFIG_SERVER} -o yaml | grep host: | cut -d ":" -f 2 | tr -d " "`
if [ "${host}" == "" ]; then
	echo "CAN't get config server ingress address"
	exit 1
fi

url=""
fn=""
uri="http://${host}/${appname}"

# generage file depends on config kind
echo "STEP5. Generate config file "

configs=`echo ${config_kinds} | sed "s/,/ /g"`
for kind in ${configs}
do
  echo "read config ->  ${kind}"
  fn=${kind}.json
  url=${uri}/${kind}-common,${kind}-${profile}
  ofn=${basedir}/cicd/${kind}.properties
  echo "" > ${ofn}

  mkFile
done

echo ""
echo "************** END READ CONFIG ***************"
echo ""
exit 0
